@page "/password-generator"
@using System.Text
@using System

<h3>Password Generator</h3>

<div class="m-3">
    <label for="length">Password Length:</label>
    <input id="length" type="number" @bind="passwordLength" min="4" max="64" />
</div>

<div class="m-3">
    <input type="checkbox" @bind="includeLetters" /> Include Letters <br />
    <input type="checkbox" @bind="includeNumbers" /> Include Numbers <br />
    <input type="checkbox" @bind="includeSymbols" /> Include Symbols <br />
</div>

<div class="m-3">
    <button @onclick="GeneratePassword">Generate Password</button>
</div>

@if (!string.IsNullOrEmpty(generatedPassword))
{
    <div class="m-3">
        <h4>Generated Password:</h4>
        <p>@generatedPassword</p>
    </div>
}

@code {
    private int passwordLength = 12;
    private bool includeLetters = true;
    private bool includeNumbers = true;
    private bool includeSymbols = true;
    private const string Letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private const string Numbers = "0123456789";
    private const string Symbols = "!@#$%^&*()-_=+";

    private string generatedPassword;

    private void GeneratePassword()
    {
        var charSet = "";
        if (includeLetters)
        {
            charSet += Letters;
        }
        if (includeNumbers)
        {
            charSet += Numbers;
        }
        if (includeSymbols)
        {
            charSet += Symbols;
        }

        if (string.IsNullOrEmpty(charSet))
        {
            generatedPassword = "Please select at least one character set.";
            return;
        }

        var password = new StringBuilder();
        var random = new Random();
        for (int i = 0; i < passwordLength; i++)
        {
            password.Append(charSet[random.Next(charSet.Length)]);
        }

        generatedPassword = password.ToString();
    }
}
